// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// DATASOURCE
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// GENRATOR
generator client {
  provider = "prisma-client-js"
}

// MODELS
model Player {
  id          Int                  @id @default(autoincrement())
  euraId      Int?                 @unique
  createdAt   DateTime             @default(now())
  updatedAt   DateTime?
  name        String
  surname     String
  // RELATIONS
  tournaments PlayerOnTournament[]
  club        Club?                @relation(fields: [clubId], references: [id])
  clubId      Int?
}

model Tournament {
  id           Int                  @id @default(autoincrement())
  createdAt    DateTime             @default(now())
  updatedAt    DateTime?
  name         String
  date         String
  participants Int
  // RELATIONS
  place        Place?               @relation(fields: [placeId], references: [id])
  placeId      Int?
  players      PlayerOnTournament[]
  admin        User?                @relation(fields: [adminId], references: [id])
  adminId      Int?
}

model PlayerOnTournament {
  id           Int        @id @default(autoincrement())
  rank         Int
  points       Int
  // RELATIONS
  player       Player     @relation(fields: [playerId], references: [id])
  playerId     Int
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  team         Team?      @relation(fields: [teamId], references: [id])
  teamId       Int?

}

model Place {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?
  name        String
  // RELATIONS
  tournaments Tournament[]
}

model Team {
  id        Int                  @id @default(autoincrement())
  createdAt DateTime             @default(now())
  updatedAt DateTime?
  name      String               @unique
  // RELATIONS
  players   PlayerOnTournament[]
}

model Club {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  name      String    @unique
  // RELATIONS
  members   Player[]
  admins    User[]
}

model User {
  id          Int          @id @default(autoincrement())
  uid         String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?
  name        String
  email       String       @unique
  verified    Boolean      @default(false)
  role        Role         @default(READONLY)
  // RELATIONS
  club        Club?        @relation(fields: [clubId], references: [id])
  clubId      Int?
  tournaments Tournament[]
}

enum Role {
  ADMIN
  USER
  READONLY
}

