# QUERIES
type Query {
    info: String!
    ranking: [PlayerOnTournament!]!
    clubs: [Club!]!
}

# MODELS
type PlayerOnTournament {
    id: ID!
    playerId: Int!
    rank: Int!
    points: Int!
    place: Place!
    player: Player!
    team: Team
}

type Player {
    id: ID!
    name: String!
    surname: String! 
}

type Tournament {
    id: ID!
    name: String!
    date: String!
    participants: Int!
    place: Place!
    players: [PlayerOnTournament!]!
    admin: User
}

type Team {
    id: ID!
    name: String!
}

type Place {
    id: ID!
    name: String!
}

type Club {
    id: ID!
    name: String!
    members: [Player]
}

type User {
    id: ID!
    uid: String!
    name: String!
    email: String!
    club: Club
    tournaments: [Tournament]
}

# # MUTATIONS 
# type Mutation {
#     signup(email: String!, uid: String!, name: String!, club:Club): AuthPayload
#     login(email: String!, uid: String!): AuthPayload
# }

# type AuthPayload {
#     token: String
#     user: User
# }